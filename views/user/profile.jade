extends ../layout

block body
  - var name = [user.firstname, user.lastname].join(' ')
  nav.navbar.navbar-default
    .container-fluid
      .navbar-header
        span.navbar-brand= name
      ul.nav.navbar-nav.navbar-right
        li
          a.messanger(href="#", data-toggle="modal", data-target="#im") Сообщения
        li
          a(href="/logout") Выход
  .col-sm-3.text-center
    img#avatar(src="/user/avatar/"+user.id, alt=name)
    div.text-center
      a#select-avatar(href="#") Сменить аватар
  .col-sm-5
    .panel.panel-default
      .panel-heading
        h1.panel-title Друзья
      .panel-body
        h4 Запросы
        #requests
        h4 Мои друзья
        #friends
      .panel-footer
        button.btn.btn-default(type="button", data-toggle="modal", data-target="#newFriends") Найти новых друзей
  .col-sm-4
    .panel.panel-default
      .panel-heading
        h1.panel-title Карта
      .panel-body
        #map(style="height: 300px")
        p.message Невозможно установить положение пользователя (например, пользователь не дал разрешение на определение его положения при запросе в браузере)

  #newFriends.modal.fade(tabindex='-1', role='dialog', aria-labelledby='newFriendsLabel')
    .modal-dialog(role='document')
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') ×
          h4#newFriendsLabel.modal-title Поиск новых друзей
        .modal-body
          | ...
        .modal-footer
          button.btn.btn-default(type='button', data-dismiss='modal') Закрыть

  #im.modal.fade(tabindex='-1', role='dialog', aria-labelledby='imLabel')
    .modal-dialog.modal-lg(role='document')
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-label='Close')
            span(aria-hidden='true') ×
          h4#imLabel.modal-title Сообщения
        .modal-body
          div.row
            div.col-sm-7.messages-container
              div.alert.alert-warning Выберите друга, с которым хотите начать общение
            div.col-sm-5.sidebar
        .modal-footer
          div.row
            div.col-sm-10
              textarea.new-message(name="message")
            div.col-sm-2
              div.btn-toolbar
                button.btn.btn-success(type='button')
                  i.glyphicon.glyphicon-send
                  | &nbsp; Отправить

block styles
  link(rel="stylesheet", href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css")

block scripts
  script(src="/plupload-2.1.8/plupload.full.min.js")
  script(src="/plupload-2.1.8/i18n/ru.js")
  script(src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js")
  script(type="text/javascript").
    $(function(){
      function get_expiration_date () {
        var expirationDate = new Date();

        expirationDate.setTime(expirationDate.getTime() - expirationMilliseconds);

        return expirationDate;
      }

      function is_online (user) {
        if (!user.last_activity) {
          return false;
        }

        var userLastActivityDate = new Date(user.last_activity);

        return userLastActivityDate.getTime() > get_expiration_date().getTime();
      }

      function update_coordinates (coordinates) {
        $.ajax({
          url: '/user/update-coordinates',
          method: 'POST',
          data: { coordinates: JSON.stringify(coordinates) }
        }).done(function(response) {
          console.log('send_coordinates', response);
        });
      }

      function set_user_online_timer(user) {
        var lastUserInfo = usersOnline[user.id],
            $userInfo = $('.user[data-user-id=' + user.id + ']'),
            resetUserOnlineStatus = function () {
              var $userInfo = $('.user[data-user-id=' + user.id + ']');

              if ($userInfo.length) {
                $userInfo.removeClass('online');
                delete usersOnline[user.id];
              }
            };

        if (lastUserInfo && typeof lastUserInfo.timeoutId != 'undefined') {
          clearTimeout(lastUserInfo.timeoutId);
        }

        if(!user.last_activity) {
          resetUserOnlineStatus();
          return;
        }

        var timeout = new Date(user.last_activity).getTime() + expirationMilliseconds - new Date().getTime();

        if(timeout > 0 && !$userInfo.hasClass('online')) {
          $userInfo.addClass('online');
        } else if(timeout <= 0) {
          resetUserOnlineStatus();
          return;
        }

        usersOnline[user.id] = user;
        user.timeoutId = setTimeout(resetUserOnlineStatus, timeout);
      }

      function get_requests(){
        $.ajax({
          url: '/user/requests/'+my.id,
          method: 'GET'
        }).done(function(response){
          $('#requests').html(response);

          $('#requests .accept').on('click', function(e){
            $.ajax({
              url: '/user/requests',
              method: 'PUT',
              data: {
                id: $(e.target).data('id')
              }
            }).done(function(response){
              get_requests();
            });
          });

          $('#requests .decline').on('click', function(e){
            $.ajax({
              url: '/user/requests/'+$(e.target).data('id'),
              method: 'DELETE',
            }).done(function(response){
              get_requests();
            });
          });

        });
      };

      function get_users_history () {
        $.ajax({
          url: '/users/history'
        }).done(function (response) {
          response.forEach(function(user) {
            set_user_online_timer(user);
          });
        });
      }

      function get_friends(){
        $.ajax({
          url: '/user/friends/'+my.id,
          method: 'GET'
        }).done(function(response){

          $('#friends').html(response);

          $('.delete-friend').on('click', function(e){
            $.ajax({
              url: '/user/friends/'+$(e.target).data('id'),
              method: 'DELETE'
            }).done();
          });

        });
      };

      function scroll_top(container) {
        scroll_to(container, 0);
      }

      function scroll_bottom(container) {
        var $contaner = $(container);
        scroll_to(container, $contaner[0].scrollHeight);
      }

      function scroll_to(container, position) {
        var $contaner = $(container);
        $contaner.animate({ scrollTop: position }, 170);
      }

      function set_location_marker(user) {
        if(user.id == current_user.id || user.id != my.id) {
          return;
        }

        last_location_marker = !last_location_marker ? L.marker() : last_location_marker.unbindPopup();

        var $map = $('#map');
        if(!user.last_coordinates || !user.last_coordinates.length) {
          if(!$map.hasClass('hidden')) {
            $map.addClass('hidden');
          }
          return;
        }

        if ($map.hasClass('hidden')) {
          $map.removeClass('hidden');
        }

        var date = user.last_activity ? new Date(user.last_activity).toISOString().replace(/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(.*)/, '$3.$2.$1 в $4:$5') : '',
            message = is_online(user) ? 'Пользователь сейчас находится здесь' : ('Пользователь был здесь' + (date ? (' ' + date) : ''));

        map.setView(user.last_coordinates, 13);

        last_location_marker
          .setLatLng(user.last_coordinates)
          .addTo(map)
          .bindPopup(message)
          .openPopup();
      }

      function get_messages(user_id) {
        $.ajax({
          url: '/user/messages/' + user_id,
          method: 'GET'
        }).done(function (response) {
          $('#im .messages-container').html(response);
          scroll_bottom('#im .messages-container');
        });
      }

      var usersOnline = {};
      var expirationMilliseconds = #{UserService.getExpirationMilliseconds()};
      var my = JSON.parse('!{JSON.stringify(user)}');
      var current_user = JSON.parse('!{JSON.stringify(current_user)}');

      var map = L.map('map').setView([51.505, -0.09], 13);
      L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);
      var last_location_marker;


      map.on('locationfound', function (e) {
        var coordinates = [e.latitude, e.longitude];

        if (my.id == current_user.id) {
          map.setView(coordinates, 13);
          L.marker(coordinates).addTo(map);
        }

        update_coordinates(coordinates);
      });

      map.on('locationerror', function (e) {
        console.log(e.message);

        update_coordinates([]);
      });

      map.locate();

      get_requests();
      get_friends();
      get_users_history();
      set_location_marker(my);

      $('#newFriends').on('show.bs.modal', function(e){
        $.ajax({
          url: '/user/list',
          method: 'GET'
        }).done(function(response){

          $('#newFriends .modal-body').html(response);

          $(".request").on('click', function(e){
            $.ajax({
              url: '/user/request',
              method: 'GET',
              data: {
                id_requested: $(e.target).data('id')
              },
              success: function(response){
                if(response.success){
                  $(e.target).replaceWith('<span>'+response.message+'</span>');
                }
                else{
                  alert("Ошибка: "+ response.error.message);
                }
              }
            });
          });

        });
      });

      $(document).on('keypress', '.new-message', function(e) {
        if (e.which == 13 || e.keyCode == 13) {
          $('#im .btn-success').click();
          return false;
        }
      });

      $(document).on('click', '#im .btn-success', function(e) {
        var $message = $('#im .new-message'),
            message = $message.val(),
            to = $('#im .sidebar .user.active').data('user-id');

        if(!message.trim() || !to) {
          return;
        }

        $.ajax({
          url: '/user/message',
          method: 'POST',
          data: { id: to, message: message }
        }).done(function (response) {
          $message.val('');
          get_messages(to);
        });
      });

      $(document).on('click', '#im .sidebar li.user', function(e) {
        var $el = $(e.currentTarget),
            isActive = $el.hasClass('active');

        $('#im .sidebar .user.active').removeClass('active');

        $el.addClass('active');

        if(!$('#im .messages-container .alert').hasClass('hidden')) {
          $('#im .messages-container .alert').addClass('hidden');
        }

        if(!isActive) {
          get_messages($el.data('user-id'));
        }
      });

      $('#im').on('hide.bs.modal', function (e) {
        $('#im .messages-container .list-unstyled').remove();
        $('#im .messages-container .alert.hidden').removeClass('hidden');
      });

      $('#im').on('show.bs.modal', function (e) {
        $.ajax({
          url: '/user/friends/' + current_user.id + '?view=as-list-for-messanger',
          method: 'GET'
        }).done(function (response) {
          $('#im .sidebar').html(response);
          if ($('#im .messages-container .alert').hasClass('hidden')) {
            $('#im .messages-container .alert').removeClass('hidden');
          }
        });
      });

      var avatarCroppedUploaded,
          uploader = new plupload.Uploader({
              browse_button: 'select-avatar',
              url: '/user/avatar',
              multi_selection: false,
              filters: {
                mime_types: [
                  {title: "Image files", extensions: "jpg, jpeg"},
                ],
                max_file_size: "2000kb",
              },
              resize: {
                width: 200,
                height: 200
              }
            });

      uploader.init();

      uploader.bind('FilesAdded', function(up, files){
        if(files.length) {
          uploader.settings.url = '/user/avatar';
          uploader.settings.resize.crop = false;

          avatarCroppedUploaded = false;

          uploader.start();
        }
      });

      uploader.bind('FileUploaded', function(up, file, result){
        if(result.status == 200){
          if(!avatarCroppedUploaded) {
            var src = $('#avatar').attr('src').split('?',1)[0]+ '?_'+ new Date().getTime();
            $('#avatar').attr('src', src);

            uploader.settings.url = '/user/avatar?cropped=true';
            uploader.settings.resize.crop = true;
            file.status = plupload.QUEUED;

            avatarCroppedUploaded = true;

            uploader.start();
          }
        }
        else{
          alert(result.response);
        }
      });

      io.socket.get('/user/subscribe', function(resData, jwres){
        return;
      });

      io.socket.on('online', function (user) {
        set_user_online_timer(user);
        set_location_marker(user);
      });

      io.socket.on('request', function (event){
        switch (event.verb) {
          case 'created':
            var request = event.data;
            var user = request.id_requesting;
            if(my.id == request.id_requested.id){
              get_requests();
            }
            break;
          default:
            console.warn('Unrecognized socket event (`%s`) from server:',event.verb, event);
        }
      });

      io.socket.on('friend', function (event){
        switch (event.verb) {
          case 'created':
            if(my.id == event.data.id_user || my.id == event.data.id_friend){
              get_friends();
            }
            break;
          default:
            console.warn('Unrecognized socket event (`%s`) from server:',event.verb, event);
        }
      });

      io.socket.on('delete_friend', function(data){
        if(my.id == data.id_user || my.id == data.id_friend){
          get_friends();
        }
      });

      io.socket.on('message', function(data){
        if(current_user.id == data.data.to){
          var $user = $('#im .sidebar .user[data-user-id=' + data.data.from + ']');
          if($('#im').is(':hidden')) {
            $('.messanger').click();
            setTimeout(function() { $user.click(); }, 300);
          } else if(!$user.hasClass('active')) {
            $user.click();
          } else {
            get_messages($('#im .sidebar .user.active').data('user-id'));
          }
        }
      });

    });
